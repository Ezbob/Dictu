/**
 * parser.du
 *
 * Testing the Argparse.Parser.parse() method
 */
import System;

from UnitTest import UnitTest;
from Argparse import Parser;

System.argv.extend([
    "--number", "7",
    "-n", "8080",
    "-s", "string",
    "-b",
    "-l", "adsf,qwer",
    "--port", "8080"
]);

class TestArgparser < UnitTest {

    private parser;

    setUp() {
        this.parser = Parser("parser_test", "Test Program", "");
    }

    testNewParser() {
        this.assertNotNil(this.parser);
    }

    testAddString() {
        print(System.argv);
        this.parser.addString("-s", "string arg", false);
        const res = this.parser.parse();
        this.assertType(res, "result");
        this.assertNotNil(res);
        this.assertTruthy(res.success());
        const args = res.unwrap();
        this.assertNotNil(args.s);
    }

    testAddNumber() {
        print(System.argv);
        this.parser.addNumber("-n", "number arg", true);
        const res = this.parser.parse();
        this.assertType(res, "result");
        this.assertNotNil(res);
        this.assertTruthy(res.success());
        const args = res.unwrap();
        this.assertNotNil(args.n);
    }

    testAddBool() {
        print(System.argv);
        this.parser.addBool("-b", "bool arg", true, "bool");
        const res = this.parser.parse();
        this.assertType(res, "result");
        this.assertNotNil(res);
        this.assertTruthy(res.success());
        const args = res.unwrap();
        this.assertNotNil(args.b);
    }

    testAddLongflag() {
        this.parser.addNumber("--port", "tcp port to listen on", true);
        const res = this.parser.parse();
        this.assertType(res, "result");
        this.assertNotNil(res);
        this.assertTruthy(res.success());
        const args = res.unwrap();
        this.assertNotNil(args.port);
    }

    testAddList() {
        this.parser.addString("-l", "list arg", true);
        const res = this.parser.parse();
        this.assertType(res, "result");
        this.assertNotNil(res);
        this.assertTruthy(res.success());
        const args = res.unwrap();
        this.assertNotNil(args.l);
    }

    testUsage() {
        const usage = this.parser.usage();
        this.assertNotEquals(usage, "");
    }
}

TestArgparser().run();
