/**
 * select.du
 *
 * Testing Sqlite.connect() and Sqlite.execute()
 *
 * Tests inserting and selecting from a table in SQLite
 */
from UnitTest import UnitTest;

import Sqlite;

class TestSqliteSelect < UnitTest {
    private connection;

    setUp() {
        const connection = Sqlite.connect(":memory:");
        this.assertTruthy(connection.success());
        this.connection = connection.unwrap();

        // Create table
        this.connection.execute("CREATE TABLE test (x int)").unwrap();

        // Seed Data
        this.connection.execute("INSERT INTO test VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10)").unwrap();
    }

    tearDown() {
        this.connection.close();
    }

    testSelectAllRows() {
        const result = this.connection.execute("SELECT * FROM test").unwrap();

        this.assertEquals(result, [
            [1],
            [2],
            [3],
            [4],
            [5],
            [6],
            [7],
            [8],
            [9],
            [10]
        ]);
    }

    testSelectSingleRowLiteral() {
        const result = this.connection.execute("SELECT * FROM test WHERE x = 1").unwrap();

        this.assertEquals(result, [
            [1]
        ]);
    }

    testSelectSingleRowVariable() {
        const result = this.connection.execute("SELECT * FROM test WHERE x = ?", [1]).unwrap();

        this.assertEquals(result, [
            [1]
        ]);
    }

    testSelectSingleRowVariableWrongValue() {
        const result = this.connection.execute("SELECT * FROM test WHERE x = ?", [nil]).unwrap();

        this.assertEquals(result, []);
    }

    testSelectMultipleRowsVariable() {
        const result = this.connection.execute("SELECT * FROM test WHERE x > ?", [5]).unwrap();

        this.assertEquals(result, [
            [6],
            [7],
            [8],
            [9],
            [10],
        ]);
    }
}

TestSqliteSelect().run();