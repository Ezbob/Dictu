/**
 * copy.du
 *
 * Testing the obj.copy() and obj.deepCopy() methods
 *
 * .copy() returns a shallow copy of the object
 * .deepCopy() returns a deep copy of the object
 */
from UnitTest import UnitTest;

class Test {
    init() {
        this.x = [1, 2];
        this.z = {1: 2};
    }
}

class TestClassCopy < UnitTest {
    testShallowCopy() {
        const obj = Test();

        // First check the object was created properly
        this.assertEquals(obj.x, [1, 2]);
        this.assertEquals(obj.z, {1: 2});

        const objCopy = obj.copy(); // shallow copy

        this.assertEquals(objCopy.x, [1, 2]);
        this.assertEquals(objCopy.z, {1: 2});

        objCopy.y = 10;

        this.assertEquals(objCopy.y, 10);
        this.assertFalsey(obj.hasAttribute('y'));
    }

    testDeepCopy() {
        const obj = Test();

        obj.y = Test();

        const deepCopy = obj.deepCopy();

        this.assertEquals(deepCopy.x, [1, 2]);
        this.assertEquals(deepCopy.y.x, [1, 2]);

        deepCopy.y.x.push(1);

        this.assertEquals(deepCopy.y.x, [1, 2, 1]);
        this.assertEquals(obj.y.x, [1, 2]);

        deepCopy.i = 10;

        this.assertEquals(deepCopy.i, 10);
        this.assertFalsey(obj.hasAttribute('i'));
    }
}

TestClassCopy().run();